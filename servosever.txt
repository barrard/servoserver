/*
 *  This sketch demonstrates how to set up a simple HTTP-like server.
 *  The server will set a GPIO pin depending on the request
 *    http://server_ip/gpio/0 will set the GPIO2 low,
 *    http://server_ip/gpio/1 will set the GPIO2 high
 *  server_ip is the IP address of the ESP8266 module, will be 
 *  printed to Serial when the module is connected.
 */

#include <ESP8266WiFi.h>
#include <Servo.h> 
 
Servo myservo;  // create servo object to control a servo 
                // twelve servo objects can be created on most boards
 
int servoVal = 100;
const char* ssid = "HT028";
const char* password = "portland";
String left = "left";
String right = "right";

// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(8266);

void setup() {
  Serial.begin(115200);
  delay(10);

  myservo.attach(2);  // attaches the servo on GIO2 to the servo object 

  // prepare GPIO2
  pinMode(2, OUTPUT);
  digitalWrite(2, 0);
  
  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  
  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(10);
  }
  
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  Serial.println("the request");
//  Serial.println(req);
  Serial.println(req.length());
  Serial.println("Index of HTTP/1.1 is ");
  int endOfReq = req.indexOf("HTTP/1.1");
  Serial.println(endOfReq);
  Serial.println(req);
  Serial.println(req.substring(4));
  String value = req.substring(4, endOfReq-1);
  Serial.println("Length = ");
  Serial.println(value.length());
   value = value.substring(1);//.toInt();
   Serial.println(value);
//   if((value != "l")||(value!="r")){
//    Serial.println("invalid request");
//    client.stop();
//    return;
//    }
   if(value=="l"){
   servoVal += 10;    
    }
    if(value=="g"){
         servoVal -= 10;
      }
  Serial.println(servoVal);
  if(servoVal >= 180){
    servoVal = 180;
    }
  if(servoVal <= 0){
    servoVal = 0;
    }
  Serial.println("NEW SERVO VALUE");
  Serial.println(servoVal);
  myservo.write(servoVal);
  client.flush();
    // Prepare the response
  String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nGPIO is now ";
  s += "</html>\n";

  // Send the response to the client
  client.print(s);
  delay(1);
  Serial.println("Client disonnected");
  
  // Match the request
//  int val;
//  if (req.indexOf("/gpio/0") != -1)
//    val = 0;
//  else if (req.indexOf("/gpio/1") != -1)
//    val = 1;
//  else {
//    Serial.println("invalid request");
//    client.stop();
//    return;
//  }

  // Set GPIO2 according to the request
//  digitalWrite(2, val);
  
  client.flush();



  // The client will actually be disconnected 
  // when the function returns and 'client' object is detroyed
}
